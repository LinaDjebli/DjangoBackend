# Generated by Django 5.0.6 on 2024-07-16 15:29

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activity_id', models.AutoField(primary_key=True, serialize=False)),
                ('activity_name', models.CharField(max_length=255)),
                ('guide_name', models.CharField(max_length=255)),
                ('activity_type', models.CharField(max_length=255)),
                ('activity_description', models.TextField()),
                ('activity_location', models.TextField()),
                ('emergency_phone_number', models.CharField(max_length=20)),
                ('cut_off_time', models.CharField(max_length=255)),
                ('meeting_point', models.TextField()),
                ('groupesize', models.CharField(max_length=255)),
                ('dropoff', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('wilaya', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ActivityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CategorySite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('for_you', 'For You'), ('culture', 'Culture'), ('nature', 'Nature'), ('hotel', 'Hotel'), ('food', 'Food')], max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_type', models.CharField(choices=[('Mountainous', 'Mountainous Region'), ('Coastal', 'Coastal Region'), ('Desert', 'Desert Region'), ('Forest', 'Forest Region')], max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryAgencySignup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255)),
                ('agency_name', models.CharField(max_length=255)),
                ('agency_email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('agency_phone_number', models.CharField(max_length=15)),
                ('agency_website', models.CharField(max_length=255)),
                ('number_of_employees', models.CharField(max_length=15)),
                ('agency_location', models.CharField(max_length=15)),
                ('agency_licenses', models.FileField(blank=True, null=True, upload_to='licenses/')),
                ('agency_profile_picture', models.FileField(default='projectone/Users/defaults/default-avatar-icon-of-social-media-user-vector.jpg', upload_to='profile_pictures/')),
                ('verification_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('name', models.CharField(default='Default Name', max_length=100)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(default='Default description')),
                ('title', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='images/')),
                ('file', models.FileField(upload_to='files/')),
            ],
        ),
        migrations.CreateModel(
            name='DailyActivity',
            fields=[
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='daily_activity', serialize=False, to='Users.activity')),
                ('start_hour', models.TimeField(blank=True, null=True)),
                ('end_hour', models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OneDayActivity',
            fields=[
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='one_day_activity', serialize=False, to='Users.activity')),
                ('activity_date', models.DateField(blank=True, null=True)),
                ('start_hour', models.TimeField()),
                ('end_hour', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='SpecificDurationActivity',
            fields=[
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='specific_duration_activity', serialize=False, to='Users.activity')),
                ('activity_start_date', models.DateField()),
                ('start_hour', models.TimeField()),
                ('activity_end_date', models.DateField()),
                ('end_hour', models.TimeField()),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='activity_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.activitycategory'),
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Highlights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='highlights', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Includes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='includes', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='NotAllowed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='not_allowed', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='NotIncludes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='not_includes', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='NotSuitableFor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notsuitable_for', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Photos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('File', models.ImageField(upload_to='activity_photos/')),
                ('activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_type', models.CharField(max_length=50)),
                ('number_of_clients', models.IntegerField()),
                ('price', models.FloatField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Enter phone number in international format, starting with +213 or 0 followed by 9 digits.', max_length=128, null=True, region='DZ')),
                ('rating', models.DecimalField(decimal_places=1, default=0.0, max_digits=3)),
                ('item_type', models.CharField(max_length=100)),
                ('full_description', models.TextField()),
                ('highlight', models.TextField()),
                ('url', models.URLField(max_length=500)),
                ('time_string', models.TextField()),
                ('picture', models.ImageField(upload_to='images/')),
                ('picture1', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('picture2', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('picture3', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('picture4', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.categorysite')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.region')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='Users.item')),
            ],
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transport', models.TextField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(max_length=255)),
                ('start_hour', models.TimeField()),
                ('end_hour', models.TimeField()),
                ('activity', models.ForeignKey(blank=True, default='1', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weekly_activity', to='Users.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Wilayat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('picture', models.ImageField(upload_to='images/')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.categorysite')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='wilayat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.wilayat'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('is_client', models.BooleanField(default=False)),
                ('is_agency', models.BooleanField(default=False)),
                ('is_guide', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Guide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guide_email', models.EmailField(max_length=254, null=True, unique=True)),
                ('guide_phone_number', models.CharField(max_length=15, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('guide_first_name', models.CharField(max_length=30, null=True)),
                ('guide_last_name', models.CharField(max_length=30, null=True)),
                ('guide_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('guide_dateofbirth', models.DateField(verbose_name='mm/dd/yyyy')),
                ('guide_description', models.CharField(max_length=200)),
                ('guide_website', models.CharField(max_length=100, null=True)),
                ('guide_location', models.CharField(max_length=100, null=True)),
                ('guide_licenses', models.FileField(null=True, upload_to='licenses/')),
                ('guide_profile_picture', models.ImageField(default='projectone/Users/defaults/default-avatar-icon-of-social-media-user-vector.jpg', upload_to='profile_pictures/')),
                ('guide_languages', models.ManyToManyField(related_name='guides', to='Users.language')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='guide', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, null=True)),
                ('last_name', models.CharField(max_length=30, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('profile_picture', models.ImageField(default='projectone/Users/defaults/default-avatar-icon-of-social-media-user-vector.jpg', upload_to='profile_pictures/')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agency_name', models.CharField(max_length=255, null=True)),
                ('agency_email', models.EmailField(max_length=254, null=True, unique=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('agency_phone_number', models.CharField(max_length=15, null=True)),
                ('agency_website', models.CharField(max_length=255, null=True)),
                ('number_of_employees', models.CharField(max_length=15, null=True)),
                ('agency_location', models.CharField(max_length=15, null=True)),
                ('verification_code', models.CharField(max_length=6, null=True)),
                ('agency_licenses', models.FileField(blank=True, null=True, upload_to='licenses/')),
                ('agency_profile_picture', models.FileField(default='projectone/Users/defaults/default-avatar-icon-of-social-media-user-vector.jpg', upload_to='profile_pictures/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='agency', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='published_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='published_activities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='dailyactivity',
            constraint=models.CheckConstraint(check=models.Q(('start_hour__lt', models.F('end_hour'))), name='start_date_before_end_date'),
        ),
        migrations.AddConstraint(
            model_name='onedayactivity',
            constraint=models.CheckConstraint(check=models.Q(('start_hour__lt', models.F('end_hour'))), name='start_date_before_end_date_oneday'),
        ),
        migrations.AddConstraint(
            model_name='specificdurationactivity',
            constraint=models.CheckConstraint(check=models.Q(('activity_start_date__lt', models.F('activity_end_date'))), name='start_date_before_end_date_specific'),
        ),
        migrations.AddConstraint(
            model_name='weeklyactivity',
            constraint=models.CheckConstraint(check=models.Q(('start_hour__lt', models.F('end_hour'))), name='start_date_before_end_date_weekly'),
        ),
        migrations.AddConstraint(
            model_name='activity',
            constraint=models.CheckConstraint(check=models.Q(('activity_location', models.F('meeting_point')), _negated=True), name='meeting_point_different_from_location'),
        ),
    ]
